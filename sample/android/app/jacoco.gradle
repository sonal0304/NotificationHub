/**
 * h8MyJob / PowerMockJacocoDemo
 *
 * https://github.com/h8MyJob/PowerMockJacocoDemo/wiki
 * https://stackoverflow.com/questions/53071373/powermock-jacoco-gradle-0-coverage-for-android-project
 *
 */

apply plugin: "jacoco"

configurations {
    jacocoAnt
    jacocoRuntime
}

jacoco {
    toolVersion = "0.8.1"
}

def offline_instrumented_outputDir = "$buildDir.path/intermediates/classes-instrumented/debug"

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

def coverageSourceDirs = [
    "../../node_modules/react-native-azurenotificationhub/android/src/main/java"
]

task jacocoTestReport(type: JacocoReport, dependsOn: "test") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    getClassDirectories().setFrom(fileTree(
        dir: "../../node_modules/react-native-azurenotificationhub/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes",
        excludes: ['**/R.class',
                   '**/R$*.class',
                   '**/BuildConfig.*',
                   '**/MainActivity.*'])
    )

    getSourceDirectories().setFrom(files(coverageSourceDirs))
    getExecutionData().setFrom(files("build/jacoco/testDebugUnitTest.exec"))
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("../../jacocoXml.xml")
        html.enabled true
        html.destination file("build/test-results/jacocoHtml")
    }
}

/* This task is used to create offline instrumentation of classes for on-the-fly instrumentation coverage tool like Jacoco. See jacoco classId
 * and Offline Instrumentation from the jacoco site for more info.
 *
 * In this case, some classes mocked using PowerMock were reported as 0% coverage on jacoco & Sonarqube. The issue between PowerMock and jacoco
 * is well documented, and a possible solution is offline Instrumentation (not so well documented for gradle).
 *
 * In a nutshell, this task:
 *  - Pre-instruments the original *.class files
 *  - Puts the instrumented classes path at the beginning of the task's classpath (for report purposes)
 *  - Runs test & generates a new exec file based on the pre-instrumented classes -- as opposed to on-the-fly instrumented class files generated by jacoco.
 *
 * It is currently not implemented to run prior to any other existing tasks (like test, jacocoTestReport, etc...), therefore, it should be called
 * explicitly if Offline Instrumentation report is needed.
 *
 *  Usage: gradle clean & gradle createOfflineInstrTestCoverageReport & gradle jacocoTestReport
 *   - gradle clean //To prevent influence from any previous task execution
 *   - gradle createOfflineInstrTestCoverageReport //To generate *.exec file from offline instrumented class
 *   - gradle jacocoTestReport //To generate html report from newly created *.exec task
 */
task createOfflineTestCoverageReport(dependsOn: ["instrument", "testDebugUnitTest"]) {
    doLast {
        ant.taskdef(name: "report",
                    classname: "org.jacoco.ant.ReportTask",
                    classpath: configurations.jacocoAnt.asPath)
        ant.report() {
            executiondata {
                ant.file(file: "$buildDir.path/jacoco/testDebugUnitTest.exec")
            }
            structure(name: "React Native Azure Notification Hub Sample") {
                classfiles {
                    fileset(dir: "$project.buildDir/intermediates/javac/debug/compileDebugJavaWithJavac/classes")
                }
                sourcefiles {
                    fileset(dir: "../../node_modules/react-native-azurenotificationhub/android/src/main/java")
                }
            }
        }
    }
}

/*
 * Part of the Offline Instrumentation process is to add the jacoco runtime to the class path along with the path of the instrumented files.
 */
gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(instrument)) {
        tasks.withType(Test) {
            doFirst {
                systemProperty "jacoco-agent.destfile", buildDir.path + "/jacoco/testDebugUnitTest.exec"
                classpath = files(offline_instrumented_outputDir) + classpath + configurations.jacocoRuntime
            }
        }
    }
}

/*
 *  Instruments the classes per se
 */
task instrument(dependsOn: "compileDebugUnitTestSources") {
    doLast {
        println "Instrumenting classes"

        ant.taskdef(name: "instrument",
                classname: "org.jacoco.ant.InstrumentTask",
                classpath: configurations.jacocoAnt.asPath)

        ant.instrument(destdir: offline_instrumented_outputDir) {
            fileset(dir: "$buildDir.path/intermediates/javac/debug/compileDebugJavaWithJavac/classes")
        }
    }
}
